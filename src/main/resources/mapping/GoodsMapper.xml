<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jd.shop.dao.GoodsMapper" >
  <resultMap id="BaseResultMap" type="com.jd.shop.model.Goods" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="DOUBLE" />
    <result column="gclass" property="gclass" jdbcType="CHAR" />
    <result column="parameter1" property="parameter1" jdbcType="VARCHAR" />
    <result column="parameter2" property="parameter2" jdbcType="VARCHAR" />
    <result column="parameter3" property="parameter3" jdbcType="VARCHAR" />
    <result column="freight" property="freight" jdbcType="DOUBLE" />
    <result column="detail" property="detail" jdbcType="VARCHAR" />
    <result column="sales" property="sales" jdbcType="DOUBLE" />
    <result column="stock" property="stock" jdbcType="DOUBLE" />
    <result column="shelf" property="shelf" jdbcType="DATE" />
    <result column="part_goods" property="partGoods" jdbcType="INTEGER" />
    <result column="piclist_goods" property="piclistGoods" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, price, gclass, parameter1, parameter2, parameter3, freight, detail, sales, 
    stock, shelf, part_goods, piclist_goods
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_goods
    where id = #{id,jdbcType=INTEGER}
  </select>

  <!-- new -->
  <select id="getAll" resultType="com.jd.shop.model.Goods">
    select
    <include refid="Base_Column_List" />
    from t_goods
  </select>

  <select id="getOther" resultType="com.jd.shop.model.Goods">
    SELECT
    <include refid="Base_Column_List" />
    FROM t_goods
    WHERE t_goods.part_goods IS NULL
  </select>

  <select id="getgoodspic" parameterType="java.lang.Integer" resultType="com.jd.shop.model.Image">
    SELECT
    t_image.title,
    t_image.`server`,
    t_image.filename,
    t_image.id
    FROM
    t_piclist
    JOIN t_goods ON t_goods.piclist_goods = t_piclist.id
    JOIN t_image ON t_image.image_list = t_piclist.id
    WHERE t_goods.id = #{goodsid,jdbcType=INTEGER}
  </select>

  <select id="getGoodsByPart" parameterType="java.lang.Integer" resultType="map">
    SELECT g.id as gid,g.`name` as gname ,g.price ,i.title
    FROM t_goods as g
    LEFT JOIN (SELECT * FROM t_image) as i
    ON i.image_list=g.piclist_goods
    WHERE g.part_goods=#{pid,jdbcType=INTEGER} and g.shelf is not NULL
    GROUP BY g.id
  </select>

  <select id="getAllGoods" resultType="com.jd.shop.model.Goods" >
    SELECT
    t_goods.id,
    t_goods.`name`,
    t_goods.price,
    t_goods.piclist_goods,
    t_goods.shelf,
    t_goods.parameter1,
    t_goods.parameter2,
    t_goods.parameter3,
    t_image.title,
    t_part.pname
    FROM
    t_goods
    LEFT JOIN t_image ON t_goods.piclist_goods = t_image.image_list
    INNER JOIN t_part ON t_goods.part_goods = t_part.id
    <where>
      <if test="array!=null">
      <foreach collection="array" item="item" index="index"  separator="OR">
        t_goods.`name` LIKE CONCAT('%',#{item},'%')
        OR t_part.pname LIKE CONCAT('%',#{item},'%')
        OR t_goods.parameter1 LIKE CONCAT('%',#{item},'%')
        OR t_goods.parameter2 LIKE CONCAT('%',#{item},'%')
        OR t_goods.parameter3 LIKE CONCAT('%',#{item},'%')
      </foreach>
      </if>
      and t_goods.shelf is not null
    </where>
    GROUP BY t_goods.`name`
  </select>

  <select id="search_all" parameterType="java.lang.String" resultType="com.jd.shop.model.Goods">
    SELECT
      t_goods.id,t_goods.`name`,t_goods.price,t_goods.gclass,t_goods.parameter1,t_goods.parameter2,t_goods.parameter3,t_goods.freight,
      t_goods.detail,t_goods.sales,t_goods.stock,t_goods.shelf,t_goods.part_goods,t_goods.piclist_goods,t_image.title
    FROM t_goods
    INNER JOIN t_image ON t_goods.piclist_goods = t_image.image_list
    WHERE
      t_goods.`name` LIKE concat(concat('%',#{key,jdbcType=VARCHAR}),'%')
      or t_goods.parameter1 LIKE concat(concat('%',#{key,jdbcType=VARCHAR}),'%')
      or t_goods.parameter2 LIKE concat(concat('%',#{key,jdbcType=VARCHAR}),'%')
      or t_goods.parameter3 LIKE concat(concat('%',#{key,jdbcType=VARCHAR}),'%')
      or t_goods.detail like concat(concat('%',#{key,jdbcType=VARCHAR}),'%')
    GROUP BY t_goods.id
    ORDER BY
    t_goods.`name`,t_goods.parameter1,t_goods.parameter2,t_goods.parameter3,t_goods.detail
  </select>

  <select id="select_under" resultType="java.lang.String" parameterType="java.lang.Integer">
    SELECT 1 FROM t_goods WHERE id = #{id,jdbcType=INTEGER} and shelf is NULL
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_goods
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <!-- new -->
  <delete id="deleteGoodsAll" parameterType="java.lang.Integer">
    DELETE t_goods
    FROM
    t_goods
    LEFT OUTER JOIN t_piclist ON t_goods.piclist_goods = t_piclist.id
    LEFT OUTER JOIN t_image ON t_piclist.id = t_image.image_list
    WHERE t_goods.id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="com.jd.shop.model.Goods" >
    insert into t_goods (id, name, price, 
      gclass, parameter1, parameter2, 
      parameter3, freight, detail, 
      sales, stock, shelf, part_goods, 
      piclist_goods)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{price,jdbcType=DOUBLE}, 
      #{gclass,jdbcType=CHAR}, #{parameter1,jdbcType=VARCHAR}, #{parameter2,jdbcType=VARCHAR}, 
      #{parameter3,jdbcType=VARCHAR}, #{freight,jdbcType=DOUBLE}, #{detail,jdbcType=VARCHAR}, 
      #{sales,jdbcType=DOUBLE}, #{stock,jdbcType=DOUBLE}, #{shelf,jdbcType=DATE}, #{partGoods,jdbcType=INTEGER}, 
      #{piclistGoods,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.jd.shop.model.Goods" useGeneratedKeys="true" keyProperty="id" >
    insert into t_goods
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="gclass != null" >
        gclass,
      </if>
      <if test="parameter1 != null" >
        parameter1,
      </if>
      <if test="parameter2 != null" >
        parameter2,
      </if>
      <if test="parameter3 != null" >
        parameter3,
      </if>
      <if test="freight != null" >
        freight,
      </if>
      <if test="detail != null" >
        detail,
      </if>
      <if test="sales != null" >
        sales,
      </if>
      <if test="stock != null" >
        stock,
      </if>
      <if test="shelf != null" >
        shelf,
      </if>
      <if test="partGoods != null" >
        part_goods,
      </if>
      <if test="piclistGoods != null" >
        piclist_goods,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="gclass != null" >
        #{gclass,jdbcType=CHAR},
      </if>
      <if test="parameter1 != null" >
        #{parameter1,jdbcType=VARCHAR},
      </if>
      <if test="parameter2 != null" >
        #{parameter2,jdbcType=VARCHAR},
      </if>
      <if test="parameter3 != null" >
        #{parameter3,jdbcType=VARCHAR},
      </if>
      <if test="freight != null" >
        #{freight,jdbcType=DOUBLE},
      </if>
      <if test="detail != null" >
        #{detail,jdbcType=VARCHAR},
      </if>
      <if test="sales != null" >
        #{sales,jdbcType=DOUBLE},
      </if>
      <if test="stock != null" >
        #{stock,jdbcType=DOUBLE},
      </if>
      <if test="shelf != null" >
        #{shelf,jdbcType=DATE},
      </if>
      <if test="partGoods != null" >
        #{partGoods,jdbcType=INTEGER},
      </if>
      <if test="piclistGoods != null" >
        #{piclistGoods,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jd.shop.model.Goods" >
    update t_goods
    <set >
      <if test="name != null" >
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="gclass != null" >
        gclass = #{gclass,jdbcType=CHAR},
      </if>
      <if test="parameter1 != null" >
        parameter1 = #{parameter1,jdbcType=VARCHAR},
      </if>
      <if test="parameter2 != null" >
        parameter2 = #{parameter2,jdbcType=VARCHAR},
      </if>
      <if test="parameter3 != null" >
        parameter3 = #{parameter3,jdbcType=VARCHAR},
      </if>
      <if test="freight != null" >
        freight = #{freight,jdbcType=DOUBLE},
      </if>
      <if test="detail != null" >
        detail = #{detail,jdbcType=VARCHAR},
      </if>
      <if test="sales != null" >
        sales = #{sales,jdbcType=DOUBLE},
      </if>
      <if test="stock != null" >
        stock = #{stock,jdbcType=DOUBLE},
      </if>
      <if test="stock == null" >  <!-- new -->
        stock = NULL ,
      </if>                       <!-- new -->
      <if test="shelf != null" >
        shelf = #{shelf,jdbcType=DATE},
      </if>
      <if test="partGoods != null" >
        part_goods = #{partGoods,jdbcType=INTEGER},
      </if>
      <if test="piclistGoods != null" >
        piclist_goods = #{piclistGoods,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jd.shop.model.Goods" >
    update t_goods
    set name = #{name,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      gclass = #{gclass,jdbcType=CHAR},
      parameter1 = #{parameter1,jdbcType=VARCHAR},
      parameter2 = #{parameter2,jdbcType=VARCHAR},
      parameter3 = #{parameter3,jdbcType=VARCHAR},
      freight = #{freight,jdbcType=DOUBLE},
      detail = #{detail,jdbcType=VARCHAR},
      sales = #{sales,jdbcType=DOUBLE},
      stock = #{stock,jdbcType=DOUBLE},
      shelf = #{shelf,jdbcType=DATE},
      part_goods = #{partGoods,jdbcType=INTEGER},
      piclist_goods = #{piclistGoods,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- new -->
  <update id="goodsunder" parameterType="java.lang.Integer">
    UPDATE t_goods
    SET shelf = NULL
    WHERE id = #{goodsid,jdbcType=INTEGER}
  </update>

  <update id="updateStock" parameterType="java.lang.Number">
    UPDATE t_goods
    SET stock = #{amount,jdbcType=DOUBLE}
    WHERE id=#{gid,jdbcType=INTEGER}
  </update>

  <update id="updateSales" parameterType="java.lang.Number">
    UPDATE t_goods
    SET sales = #{amount,jdbcType=DOUBLE}
    WHERE id=#{gid,jdbcType=INTEGER}
  </update>

  <!-- 新需求 -->
  <!-- 最新的8个商品 -->
  <select id="new_goods" resultType="com.jd.shop.model.Goods" parameterType="java.lang.Integer">
    SELECT
    t_goods.id,
    t_goods.`name`,
    t_goods.price,
    t_goods.gclass,
    t_goods.shelf,
    t_goods.piclist_goods,
    t_image.title as `title`
    FROM
    t_goods
    INNER JOIN t_image ON t_goods.piclist_goods = t_image.image_list
    WHERE shelf is not null
    GROUP BY t_goods.id
    ORDER BY shelf
    DESC LIMIT #{index,jdbcType=INTEGER} , #{end,jdbcType=INTEGER}
  </select>

  <!-- 热销商品 -->
  <select id="hot_goods" resultType="com.jd.shop.model.Goods" >
    SELECT
    t_goods.id,
    t_goods.`name`,
    t_goods.price,
    t_goods.gclass,
    t_goods.sales,
    t_goods.shelf,
    t_goods.piclist_goods,
    t_image.title as `title`
    FROM
    t_goods
    INNER JOIN t_image ON t_goods.piclist_goods = t_image.image_list
    WHERE shelf is not null
    GROUP BY t_goods.id
    ORDER BY sales DESC
    LIMIT 0,3
  </select>

  <!-- 商品详情 -->
  <select id="getInfo" resultType="com.jd.shop.model.Goods" parameterType="java.lang.Integer">
    SELECT
    t_goods.id,
    t_goods.`name`,
    t_goods.price,
    t_goods.gclass,
    t_goods.parameter1,
    t_goods.parameter2,
    t_goods.parameter3,
    t_goods.freight,
    t_goods.detail,
    t_goods.sales,
    t_goods.stock,
    t_goods.shelf,
    t_goods.part_goods,
    t_goods.piclist_goods as piclistGoods,
    t_part.pname as `part`
    FROM
    t_goods
    INNER JOIN t_part ON t_goods.part_goods = t_part.id
    WHERE t_goods.id=#{goodsid,jdbcType=INTEGER}
  </select>

  <!-- 条件查询商品展示 -->
  <select id="GoodsShow" resultType="com.jd.shop.model.Goods">
    SELECT
    t_goods.id,
    t_goods.`name`,
    t_goods.price,
    t_goods.piclist_goods,
    t_goods.shelf,
    t_goods.parameter1,
    t_goods.parameter2,
    t_goods.parameter3,
    t_image.title,
    t_part.pname
    FROM
    t_goods
    LEFT JOIN t_image ON t_goods.piclist_goods = t_image.image_list
    INNER JOIN t_part ON t_goods.part_goods = t_part.id
    <where>
      <!-- 模糊查询组 -->
      <if test="array!=null">
        <foreach collection="array" item="item" index="index"  separator="OR">
          t_goods.`name` LIKE CONCAT('%',#{item},'%')
          OR t_part.pname LIKE CONCAT('%',#{item},'%')
          OR t_goods.parameter1 LIKE CONCAT('%',#{item},'%')
          OR t_goods.parameter2 LIKE CONCAT('%',#{item},'%')
          OR t_goods.parameter3 LIKE CONCAT('%',#{item},'%')
        </foreach>
      </if>
      <if test="pid!=null">
        and part_goods = #{pid,jdbcType=INTEGER}
      </if>
      <if test="min!=null">
        and t_goods.price > #{min,jdbcType=DOUBLE}
      </if>
      <if test="max!=null">
        and #{max,jdbcType=DOUBLE} > t_goods.price
      </if>
      and t_goods.shelf is not null
    </where>
    GROUP BY t_goods.`name`
  </select>

</mapper>